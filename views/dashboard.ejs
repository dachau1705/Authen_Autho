<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>

    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
</head>

<body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Express App</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/dashboard">Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin">Admin</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logout">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <div class="text-center">
            <h1 class="display-4">Welcome to Your Dashboard</h1>
            <p class="lead">Here you can manage your account and settings.</p>
            <hr class="my-4">
            <p>Explore the features of our application using the navigation links above.</p>
        </div>
        <div class="mt-5">
            <div class="d-flex justify-content-between align-items-center mt-5">
                <h2>User List</h2>
                <% if (hasPermissionCreate) { %>
                    <button class="btn btn-primary" onclick="openCreateUserModal()">Create New User</button>
                    <% } %>
            </div>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Role</th>
                        <% if (hasPermissionEdit || hasPermissionDel) { %>
                            <th>Actions</th>
                            <% } %>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(user=> { %>
                        <tr>
                            <td>
                                <%= user.username %>
                            </td>
                            <td>
                                <%= user.roles.map(role=> role.name).join(', ') %>
                            </td>

                            <% if (hasPermissionEdit || hasPermissionDel) { %>
                                <td>
                                    <% if (hasPermissionDel) { %>
                                        <form action="/api/users/delete/<%= user._id %>" method="POST"
                                            style="display:inline;" class="delete-form">
                                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                        </form>
                                        <% } %>

                                            <% if (hasPermissionEdit) { %>
                                                <button class="btn btn-info btn-sm" onclick="openUpdateModal('<%= user._id %>', '<%= user.username %>', 
                                            '<%= user.roles.map(role => role.name).join(', ') %>')">
                                                    Update
                                                </button>
                                                <% } %>
                                </td>
                                <% } %>
                        </tr>
                        <% }) %>
                </tbody>
            </table>
        </div>

    </div>

    <div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificationModalLabel">Notification</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modalMessage">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="updateUserModal" tabindex="-1" aria-labelledby="updateUserModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateUserModalLabel">Update User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="updateUserForm" method="POST">
                    <div class="modal-body">
                        <input type="hidden" id="userId" name="userId">
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" class="form-control" id="username" name="username" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="roles" class="form-label">Role</label>
                            <select class="form-select" id="roles" name="roles" required>
                                <option value="">Select Role</option>
                                <!-- Roles will be populated here -->
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Update</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createUserModalLabel">Create New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="createUserForm" method="POST">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="newUsername" class="form-label">Username</label>
                            <input type="text" class="form-control" id="newUsername" name="username" required>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="newPassword" name="password" required>
                        </div>
                        <div class="mb-3">
                            <label for="newRoles" class="form-label">Role</label>
                            <select class="form-select" id="newRoles" name="roles" required>
                                <option value="">Select Role</option>
                                <!-- Roles will be populated here -->
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Create</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="/bootstrap/js/bootstrap.bundle.min.js"></script>

    <script>
        function showModal(message) {
            document.getElementById('modalMessage').innerText = message;
            const modal = new bootstrap.Modal(document.getElementById('notificationModal'));
            modal.show();
        }

        document.querySelectorAll('.delete-form').forEach(form => {
            form.addEventListener('submit', function (event) {
                event.preventDefault();

                const formData = new FormData(this);
                const actionUrl = this.action;

                fetch(actionUrl, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            showModal('User deleted successfully.');
                            this.closest('tr').remove();
                        } else {
                            showModal('Access denied!');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showModal('Error deleting user. Please check your console for more details.');
                    });
            });
        })
        function openUpdateModal(userId, username, currentRoles) {
            document.getElementById('userId').value = userId;
            document.getElementById('username').value = username;

            fetch('/api/roles')
                .then(response => response.json())
                .then(data => {
                    const rolesSelect = document.getElementById('roles');
                    rolesSelect.innerHTML = '<option value="">Select Role</option>';

                    data.forEach(role => {
                        const option = document.createElement('option');
                        option.value = role.name;
                        option.textContent = role.name;
                        rolesSelect.appendChild(option);
                    });

                    if (currentRoles) {
                        const roleValues = currentRoles.split(', ');
                        rolesSelect.value = roleValues.includes('admin') ? 'admin' : 'user';
                    }
                })
                .catch(error => {
                    console.error('Error fetching roles:', error);
                    showModal('Error loading roles. Please try again later.');
                });

            const modal = new bootstrap.Modal(document.getElementById('updateUserModal'));
            modal.show();
        }

        document.getElementById('updateUserForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const formData = new FormData(this);
            const actionUrl = `/api/users/update/${document.getElementById('userId').value}`;
            let dataObject = {};
            for (const [key, value] of formData.entries()) {
                console.log(`${key}: ${value}`);
                dataObject[key] = value;
            }
            console.log(dataObject);

            fetch(actionUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(dataObject)
            })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                        showModal('User updated successfully.');
                    } else {
                        showModal('Access denied!');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showModal('Error updating user. Please check your console for more details.');
                });
        });
        function openCreateUserModal() {
            fetch('/api/roles')
                .then(response => response.json())
                .then(data => {
                    const rolesSelect = document.getElementById('newRoles');
                    rolesSelect.innerHTML = '<option value="">Select Role</option>';

                    data.forEach(role => {
                        const option = document.createElement('option');
                        option.value = role.name;
                        option.textContent = role.name;
                        rolesSelect.appendChild(option);
                    });

                    const modal = new bootstrap.Modal(document.getElementById('createUserModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error loading roles:', error);
                    showModal('Error loading roles. Please try again later.');
                });
        }

        document.getElementById('createUserForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const formData = new FormData(this);
            let dataObject = {};
            formData.forEach((value, key) => dataObject[key] = value);

            fetch('/api/users/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(dataObject)
            })
                .then(response => {
                    console.log(response);

                    if (response.ok) {
                        location.reload();
                        showModal('User created successfully.');
                    } else {
                        showModal('Failed to create user.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showModal('Error creating user. Please try again later.');
                });
        });
    </script>

</body>

</html>